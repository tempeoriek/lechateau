@model IList<ProductDetailsModel.ProductAttributeModel>
@using Nop.Web.Models.Catalog;
@using Nop.Core.Domain.Catalog;
@using Nop.Core.Domain.Media;
@using Nop.Core.Infrastructure;
@using System.Text;
@using System.Globalization;



@if (Model.Count > 0)
{
  <div class="attributes">
    @foreach (var attribute in Model)
    {
      string controlId = string.Format("product_attribute_{0}", attribute.Id);
      string textPrompt = !string.IsNullOrEmpty(attribute.TextPrompt) ? attribute.TextPrompt : attribute.Name;

      <div class="row" id="@string.Format("product_attribute_input_{0}", attribute.Id)" style="padding-top: 6px;">
        <div class="col-3 col-sm-3 col-md-3 d-flex justify-content-start" style="padding-top: 3px; margin: 0">
          <p style="font-size: 16px; font-weight: bold;">SIZE</p>
        </div>
        <div class="col-9 col-sm-9 col-md-9 product-detail-attribute">
          <div class="select-size d-flex flex-column">
            <div class="form-select-size">
              <ul class="list-unstyled list-inline">
                @foreach (var attributeValue in attribute.Values)
                {
                  var attributeName = String.IsNullOrEmpty(attributeValue.PriceAdjustment) ? attributeValue.Name : T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment).Text;
                  <li class="list-inline-item size-tooltip-instock">
                    <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id"
                      checked="@attributeValue.IsPreSelected"
                      data-toggle="collapse" data-target="#collapseAdd2Bag" aria-expanded="false" aria-controls="collapseAdd2Bag" />
                    @* <label for="@(controlId)_@(attributeValue.Id)" style="font-size: 16px;">@attributeName</label> *@
                    <label for="@(controlId)_@(attributeValue.Id)" style="font-size: 16px;">@attributeValue.Name</label>
                  </li>
                }
              </ul>
            </div>
          </div>
        </div>
      </div>
    }


  </div>
}




@if (Model.Count > 0)
{
  //dynamic update support
  var attributesHaveConditions = Model.Any(x => x.HasCondition);
  var dynamicPriceUpdate = EngineContext.Current.Resolve<CatalogSettings>().AjaxProcessAttributeChange;
  var attributeChangeScriptsBuilder = new StringBuilder();
  var productId = Model.First().ProductId;
  var attributeChangeHandlerFuncName = string.Format("attribute_change_handler_{0}", productId);
  if (dynamicPriceUpdate)
  {
    //generate change event script
    foreach (var attribute in Model)
    {
      string controlId = string.Format("product_attribute_{0}", attribute.Id);
      switch (attribute.AttributeControlType)
      {
        case AttributeControlType.DropdownList:
          {
            attributeChangeScriptsBuilder.AppendFormat("$('#{0}').change(function(){{{1}();}});\n", controlId, attributeChangeHandlerFuncName);
          }
          break;
        case AttributeControlType.RadioList:
        case AttributeControlType.ColorSquares:
          {
            foreach (var attributeValue in attribute.Values)
            {
              attributeChangeScriptsBuilder.AppendFormat("$('#{0}_{1}').click(function(){{{2}();}});\n", controlId, attributeValue.Id, attributeChangeHandlerFuncName);
            }
          }
          break;
        case AttributeControlType.Checkboxes:
        case AttributeControlType.ReadonlyCheckboxes:
          {
            foreach (var attributeValue in attribute.Values)
            {
              attributeChangeScriptsBuilder.AppendFormat("$('#{0}_{1}').click(function(){{{2}();}});\n", controlId, attributeValue.Id, attributeChangeHandlerFuncName);
            }
          }
          break;
        default:
          break;
      }
    }
    //render scripts
    //almost the same implementation is used in the \Views\Product\_RentalInfo.cshtml file
    <script type="text/javascript">
      function @(attributeChangeHandlerFuncName)() {
        $.ajax({
          cache: false,
          url: '@Html.Raw(Url.Action("ProductDetails_AttributeChange", "ShoppingCart", new {productId = productId, validateAttributeConditions = attributesHaveConditions}))',
          data: $('#product-details-form').serialize(),
          type: 'post',
          success: function(data) {
            if (data.price) {
              $('.price-value-@productId').text(data.price);
            }
            if (data.sku) {
              $('#sku-@productId').text(data.sku);
            }
            if (data.mpn) {
              $('#mpn-@productId').text(data.mpn);
            }
            if (data.gtin) {
              $('#gtin-@productId').text(data.gtin);
            }
            if (data.stockAvailability) {
              $('#stock-availability-value-@productId').text(data.stockAvailability);
            }
            if (data.enabledattributemappingids) {
              for (var i = 0; i < data.enabledattributemappingids.length; i++) {
                $('#product_attribute_label_' + data.enabledattributemappingids[i]).show();
                $('#product_attribute_input_' + data.enabledattributemappingids[i]).show();
              }
            }
            if (data.enabledattributemappingids) {
              for (var i = 0; i < data.disabledattributemappingids.length; i++) {
                $('#product_attribute_label_' + data.disabledattributemappingids[i]).hide();
                $('#product_attribute_input_' + data.disabledattributemappingids[i]).hide();
              }
            }
          }
        });
      }
      $(document).ready(function() {
        @(attributeChangeHandlerFuncName)();
        @Html.Raw(attributeChangeScriptsBuilder.ToString())
      });
    </script>
  }
}


@if (Model.Count > 0)
{
  //attribute picture update
  var pictureAdjustmentTableScripts = new StringBuilder();
  var pictureAttributeScripts = new StringBuilder();
  string pictureAdjustmentTableName = "";
  string pictureAdjustmentFuncName = "";
  string pictureDefaultSizePrefix = "defaultsize";
  string pictureFullSizePrefix = "fullsize";
  var pictureSizes = new[] { pictureDefaultSizePrefix, pictureFullSizePrefix };
  foreach (var attribute in Model)
  {
    string controlId = string.Format("product_attribute_{0}", attribute.Id);

    pictureAdjustmentTableName = string.Format("productAttributeValueAdjustmentTable_{0}", attribute.ProductId);
    pictureAdjustmentFuncName = string.Format("adjustProductAttributeValuePicture_{0}", attribute.ProductId);

    switch (attribute.AttributeControlType)
    {
      case AttributeControlType.DropdownList:
        {
          pictureAttributeScripts.AppendFormat("$('#{0}').change(function(){{{1}('{2}',{3});}});\n", controlId, pictureAdjustmentFuncName, controlId, attribute.ProductId);

          foreach (var pictureSize in pictureSizes)
          {
            pictureAdjustmentTableScripts.AppendFormat("{0}['{1}_{2}'] = new Array(", pictureAdjustmentTableName, controlId, pictureSize);
            int numberOfJsArrayItems = 0;
            if (!attribute.IsRequired)
            {
              pictureAdjustmentTableScripts.AppendFormat(CultureInfo.InvariantCulture, "'{0}',", "");
              numberOfJsArrayItems++;
            }
            foreach (var attributeValue in attribute.Values)
            {
              var pictureUrl = attributeValue.PictureModel.ImageUrl;
              if (pictureSize == pictureDefaultSizePrefix)
              {
                pictureUrl = attributeValue.PictureModel.ImageUrl;
              }
              else if (pictureSize == pictureFullSizePrefix)
              {
                pictureUrl = attributeValue.PictureModel.FullSizeImageUrl;
              }

              pictureAdjustmentTableScripts.AppendFormat(CultureInfo.InvariantCulture, "'{0}',", pictureUrl);
              numberOfJsArrayItems++;
            }
            //If you create an array with a single numeric parameter, that number is used for specifying the number of elements in this array.
            //so have a little hack here (we need at least two elements)
            if (numberOfJsArrayItems == 1)
            {
              pictureAdjustmentTableScripts.AppendFormat(CultureInfo.InvariantCulture, "'{0}',", "");
            }
            pictureAdjustmentTableScripts.Length -= 1;
            pictureAdjustmentTableScripts.Append(");\n");
          }
        }
        break;
      case AttributeControlType.RadioList:
      case AttributeControlType.ColorSquares:
        {
          foreach (var attributeValue in attribute.Values)
          {
            pictureAttributeScripts.AppendFormat("$('#{0}_{1}').click(function(){{{2}('{3}_{4}',{5});}});\n", controlId, attributeValue.Id, pictureAdjustmentFuncName, controlId, attributeValue.Id, attribute.ProductId);
            foreach (var pictureSize in pictureSizes)
            {
              var pictureUrl = attributeValue.PictureModel.ImageUrl;
              if (pictureSize == pictureDefaultSizePrefix)
              {
                pictureUrl = attributeValue.PictureModel.ImageUrl;
              }
              else if (pictureSize == pictureFullSizePrefix)
              {
                pictureUrl = attributeValue.PictureModel.FullSizeImageUrl;
              }
              pictureAdjustmentTableScripts.AppendFormat(CultureInfo.InvariantCulture, "{0}['{1}_{2}_{3}'] = '{4}';\n", pictureAdjustmentTableName, controlId, attributeValue.Id, pictureSize, pictureUrl);
            }
          }
        }
        break;
      case AttributeControlType.Checkboxes:
      case AttributeControlType.ReadonlyCheckboxes:
        {
          foreach (var attributeValue in attribute.Values)
          {
            pictureAttributeScripts.AppendFormat("$('#{0}_{1}').click(function(){{{2}('{3}_{4}',{5});}});\n", controlId, attributeValue.Id, pictureAdjustmentFuncName, controlId, attributeValue.Id, attribute.ProductId);
            foreach (var pictureSize in pictureSizes)
            {
              var pictureUrl = attributeValue.PictureModel.ImageUrl;
              if (pictureSize == pictureDefaultSizePrefix)
              {
                pictureUrl = attributeValue.PictureModel.ImageUrl;
              }
              else if (pictureSize == pictureFullSizePrefix)
              {
                pictureUrl = attributeValue.PictureModel.FullSizeImageUrl;
              }
              pictureAdjustmentTableScripts.AppendFormat(CultureInfo.InvariantCulture, "{0}['{1}_{2}_{3}'] = '{4}';\n", pictureAdjustmentTableName, controlId, attributeValue.Id, pictureSize, pictureUrl);
            }
          }
        }
        break;
      default:
        break;
    }
  }
  if (!String.IsNullOrEmpty(pictureAttributeScripts.ToString()))
  {
    <script type="text/javascript">

      //Picture adjustment table
      var @(pictureAdjustmentTableName) = new Array();
      //Picture adjustment table initialize
      @Html.Raw(pictureAdjustmentTableScripts.ToString())
      //Picture adjustment function
      function @(pictureAdjustmentFuncName)(controlId, productId) {
        var ctrl = $('#' + controlId);
        var pictureDefaultSizeUrl = '';
        var pictureFullSizeUrl = '';
        if((ctrl.is(':radio') && ctrl.is(':checked')) || (ctrl.is(':checkbox') && ctrl.is(':checked'))) {
          pictureDefaultSizeUrl = @(pictureAdjustmentTableName)[controlId + '_@(pictureDefaultSizePrefix)'];
          pictureFullSizeUrl = @(pictureAdjustmentTableName)[controlId + '_@(pictureFullSizePrefix)'];
        } else if(ctrl.is('select')) {
          var idx = $('#' + controlId + " option").index($('#' + controlId + " option:selected"));
          if(idx != -1) {
            pictureDefaultSizeUrl = @(pictureAdjustmentTableName)[controlId + '_@(pictureDefaultSizePrefix)'][idx];
            pictureFullSizeUrl = @(pictureAdjustmentTableName)[controlId + '_@(pictureFullSizePrefix)'][idx];
          }
        }
        if (typeof pictureDefaultSizeUrl == 'string' && pictureDefaultSizeUrl != '') {
          $('#main-product-img-' + productId).attr("src", pictureDefaultSizeUrl);
        }
        if (typeof pictureFullSizeUrl == 'string' && pictureFullSizeUrl != '') {
          $('#main-product-img-lightbox-anchor-' + productId).attr("href", pictureFullSizeUrl);
        }
      }
      // Picture attributes handlers
      $(document).ready(function() {
        @Html.Raw(pictureAttributeScripts.ToString())
      });
    </script>
  }
}


<script>
  $(function () {
    $('.ddlAttrb').on('change', function () {
      var v = $(this).val();
      if(v == "-1")
      {
        $('.back-in-stock-subscription').show();
        $('.add2cart').hide();
        //$('.btn-add2cart').prop('disabled', true);
      }
      else if(v == 0)
      {
        $('.back-in-stock-subscription').hide();
        $('.add2cart').show();
        //$('.btn-add2cart').prop('disabled', true);
      }
      else{
        $('.back-in-stock-subscription').hide();
        $('.add2cart').show();
        //$('.btn-add2cart').prop('disabled', false);
      }
    });
  })

  $(function () {
    if ($(".ddlAttrb").length) {
      var vorraad = 0;
      $(".ddlAttrb > option").each(function() {
        vorraad += this.value;
      });
      if(vorraad <= 0)
      {
        $('.back-in-stock-subscription').show();
        $('.add2cart').hide();
      }
    }
  });
</script>